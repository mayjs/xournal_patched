diff --git a/src/main.c b/src/main.c
index 7d4e057..15b938d 100644
--- a/src/main.c
+++ b/src/main.c
@@ -26,6 +26,20 @@
 #include "xournal.h"
 #include "xo-interface.h"
 #include "xo-support.h"
+static gchar* export_pdf_file;
+static gboolean show_gui = TRUE;
+static gint open_page_nr = 1;
+static gchar **file_arguments = NULL;
+
+static GOptionEntry entries[] =
+{
+  { "page", 'p', 0, G_OPTION_ARG_INT, &open_page_nr, "Jump to Page", "N" },
+  { "export-pdf", 'A', 0, G_OPTION_ARG_STRING, &export_pdf_file, "Export document to a PDF file", "FILENAME" },
+  { G_OPTION_REMAINING, 0, 0, G_OPTION_ARG_FILENAME_ARRAY, &file_arguments, NULL, N_("[FILE]") },
+  { NULL }
+};
+
+
 #include "xo-callbacks.h"
 #include "xo-misc.h"
 #include "xo-file.h"
@@ -36,6 +50,8 @@ GtkWidget *winMain;
 GnomeCanvas *canvas;
 
 struct Journal journal; // the journal
+  GError  *error = NULL;
+  GOptionContext *context;
 struct BgPdf bgpdf;  // the PDF loader stuff
 struct UIData ui;   // the user interface data
 struct UndoItem *undo, *redo; // the undo and redo stacks
@@ -77,18 +93,54 @@ void init_stuff (int argc, char *argv[])
   ui.default_page.bg->canvas_item = NULL;
   ui.layerbox_length = 0;
 
-  if (argc > 2 || (argc == 2 && argv[1][0] == '-')) {
-    printf(_("Invalid command line parameters.\n"
-           "Usage: %s [filename.xoj]\n"), argv[0]);
-    gtk_exit(0);
+  // parse command line options
+  context = g_option_context_new ("");
+  g_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);
+  g_option_context_add_group (context, gtk_get_option_group (TRUE));
+  if (!g_option_context_parse (context, &argc, &argv, &error)) {
+      printf(_("option parsing failed: %s\n"), error->message);
+      exit (1);
   }
-   
+  
   undo = NULL; redo = NULL;
   journal.pages = NULL;
   bgpdf.status = STATUS_NOT_INIT;
 
-  new_journal();  
+  new_journal();
+
+  if(export_pdf_file) {
+    show_gui = FALSE;
+  }
+
+  if (file_arguments == NULL) {
+    success = 1;
+    if(export_pdf_file) {
+       // If exporting having a file to open is essential
+       printf(_("Path to xoj file mssing\n"));
+       exit(2);
+     }
+  } else {
+    if (g_path_is_absolute(file_arguments[0])) {  
+      tmpfn = g_strdup(file_arguments[0]);
+    } else {
+      tmppath = g_get_current_dir();
+      tmpfn = g_build_filename(tmppath, file_arguments[0], NULL);
+      g_free(tmppath);
+    }
+
+    success = open_journal(tmpfn);
+    g_free(tmpfn);
+  }
   
+  if (!success && !show_gui) { // GUI error is showed later
+    printf(_("Error opening file '%s'\n"), file_arguments[0]);
+    exit(2);
+  }
+
+  if(export_pdf_file) {
+     exit(print_to_pdf(export_pdf_file));
+  }
+
   ui.cur_item_type = ITEM_NONE;
   ui.cur_item = NULL;
   ui.cur_path.coords = NULL;
@@ -313,27 +365,20 @@ void init_stuff (int argc, char *argv[])
   
   init_mru();
 
-  // and finally, open a file specified on the command line
-  // (moved here because display parameters weren't initialized yet...)
+  // show error if loading file failed
   
-  if (argc == 1) return;
-  set_cursor_busy(TRUE);
-  if (g_path_is_absolute(argv[1]))
-    tmpfn = g_strdup(argv[1]);
-  else {
-    tmppath = g_get_current_dir();
-    tmpfn = g_build_filename(tmppath, argv[1], NULL);
-    g_free(tmppath);
-  }
-  success = open_journal(tmpfn);
-  g_free(tmpfn);
-  set_cursor_busy(FALSE);
   if (!success) {
     w = gtk_message_dialog_new(GTK_WINDOW (winMain), GTK_DIALOG_DESTROY_WITH_PARENT,
-       GTK_MESSAGE_ERROR, GTK_BUTTONS_OK, _("Error opening file '%s'"), argv[1]);
+       GTK_MESSAGE_ERROR, GTK_BUTTONS_OK, _("Error opening file '%s'"), file_arguments[0]);
     wrapper_gtk_dialog_run(GTK_DIALOG(w));
     gtk_widget_destroy(w);
   }
+  
+   // jump to desired page
+   if (open_page_nr > journal.npages) {
+     open_page_nr = journal.npages;
+   }
+   do_switch_page(open_page_nr - 1, TRUE, TRUE);
 }
 
 
